using Revise
using AlphaZero
using ProgressLogging
using TensorBoardLogger
using Logging
using ParameterSchedulers: Scheduler, Cos
import Flux
import FileIO
import Random
import CUDA

import LinearAlgebra
LinearAlgebra.BLAS.set_num_threads(1)

include("../mu_game_wrapper.jl")
# include("../architectures/simplemlp.jl")
# include("../architectures/resnet.jl")
include("../network.jl")

# include("../alphazerolike.jl")
include("../trace.jl")
include("../play.jl")
include("../simulations.jl")
include("../training.jl")
include("../learning.jl")
include("../benchmark.jl")
include("../probe-games.jl")

# 3x Faster than julia default implementation #! may break something
Base.hash(x::Array{Float32,3}) = hash(vec(x))
Base.hash(x::Tuple{Array{Float32,3},Int}) = hash(x[1]) >> x[2]


device = Flux.cpu
# device = Flux.gpu
# CUDA.allowscalar(false)

gspec = Examples.games["connect-four"]



##


n=1
self_play = (;
  sim=SimParams(
    num_games=100,
    num_workers=1,
    # TODO make batch sizes for each network
    batch_size=1, 
    use_gpu=true,
    # todevice=Flux.cpu, #? 
    reset_every=4, #not used, mcts resets everytime
    flip_probability=0.,
    alternate_colors=false),
  mcts = MctsParams(
    num_iters_per_turn=128, #1000 benchmark
    cpuct=1.25,
    temperature=ConstSchedule(1.0),
    dirichlet_noise_ϵ=0.25,
    dirichlet_noise_α=0.1),
  device=device)

arena = (;
  sim=SimParams(
    num_games=3,
    num_workers=3,
    batch_size=2, 
    use_gpu=true,
    reset_every=1,
    flip_probability=0., #0.5
    alternate_colors=true),
  mcts = MctsParams(
    self_play.mcts,
    temperature=ConstSchedule(0.3),
    dirichlet_noise_ϵ=0.1),
  update_threshold=0.4,
  device=device)


learning_params = (;
  num_unroll_steps=10, #if =0, g is not learning, muzero-general=20
  td_steps=50, # with max length=9, always go till the end of the game, rootvalues don't count
  discount=0.997,
  #// value_loss_weight = 0.25, #TODO
  l2_regularization=1f-4, #Float32
  #// l2_regularization=0f0, #Float32
  loss_computation_batch_size=1024,
  batches_per_checkpoint=10,
  num_checkpoints=1,
  opt=Scheduler(
    Cos(λ0=5e-3, λ1=1e-5, period=10000), # cosine annealing, google 2e4, generat doesn't use any
    Flux.ADAM()
  ),
  model_type=:mlp,
  device=device
)

benchmark_sim = SimParams(
    num_games=400,
    num_workers=64,
    batch_size=32,
    use_gpu=true,
    reset_every=1,
    flip_probability=0.0, #0.5 
    alternate_colors=true)

bench_mcts = MctsParams(
  num_iters_per_turn=500, #1000 benchmark
  cpuct=1.25,
  temperature=ConstSchedule(0.3),
  dirichlet_noise_ϵ=0.25,
  dirichlet_noise_α=0.1)

benchmark = (;
  vanilla_mcts=Benchmark.Duel(
    Mu(arena.mcts),
    Benchmark.MctsRollouts(bench_mcts),
    benchmark_sim),
  # minmax_d5=Benchmark.Duel(
  #   Mu(arena.mcts),
  #   Benchmark.MinMaxTS(depth=5, amplify_rewards=true, τ=1.),
  #   benchmark_sim)
)


  μparams = MuParams(self_play, learning_params, arena, 1_000, 10_000)

  hs_shape = 128
# muzero-general params
simμNetworkHP = MuNetworkHP(
  gspec,
  PredictionSimpleHP(hiddenstate_shape=hs_shape, width=256, depth_common=0,
    depth_vectorhead=1, depth_scalarhead=0, use_batch_norm=true, batch_norm_momentum=0.8f0),
  DynamicsSimpleHP(hiddenstate_shape=hs_shape, width=256, depth_common=-1,
   depth_vectorhead=1, depth_scalarhead=0,  use_batch_norm=true, batch_norm_momentum=0.8f0),
  RepresentationSimpleHP(hiddenstate_shape=hs_shape, width=0, depth=-1))

  num_filters=32
resμNetworkHP = MuNetworkHP(
  gspec,
  PredictionResnetHP(
    num_blocks=3,
    num_filters=num_filters,
    conv_kernel_size=(3,3),
    num_policy_head1_filters=2,
    num_value_head2_filters=2,
    batch_norm_momentum=0.6f0
  ), 
  DynamicsResnetHP(
    num_blocks=3,
    num_filters=num_filters,
    conv_kernel_size=(3,3),
    num_reward_head2_filters=32,
    batch_norm_momentum=0.6f0
  ),
  RepresentationResnetHP(
    num_blocks=2,
    num_filters=num_filters,
    conv_kernel_size=(3,3),
    batch_norm_momentum=0.6f0
  )
)

  envsim = MuEnv(gspec, μparams, MuNetwork(simμNetworkHP))
  envres = MuEnv(gspec, μparams, MuNetwork(resμNetworkHP))
  # env = MuEnv(gspec, μparams, deepcopy(env.bestnns))
  # env = MuEnv(gspec, μparams, MuNetwork(μNetworkHP), experience=FileIO.load("results/c4_5x4/memory_mctsrollout500.jld2", "mem"))
  # env = MuEnv(gspec, μparams, μNetwork, experience=FileIO.load("results/c4_5x4/memory_mctsrollout500.jld2", "mem"))
##
|
# cpu
@timed self_play_step!(envsim)
@timed learning_step!(envsim)


path = "results/c4/" * format(now(),"yyyy-mm-ddTHHMM") * "_custominit_batch256/"
tblogger=TBLogger(path, min_level=Logging.Info)

with_logger(tblogger) do
  @info "params" params=μparams
  # @info "alphalike params" αnns.f.net.hyper
  # @timed learning_step!(env)
  @info "network params" resμNetworkHP 
  # @info "Memory Analysis" memory_analysis(env.memory)... "generated by MinMax player"
  @info "Benchmark" run_duel(envres, benchmark)...
  mutrain!(envsim, benchmark=benchmark, path=path)
end



# # simple test
# game = GI.init(gspec)

# GI.play!(game, 3)
# # hiddenstate = h(game)
# onehotaction = GI.encode_action(gspec,a)
# cat(hiddenstate, onehotaction, dims=3)

# state1 = GI.current_state(game)
# GI.play!(game, 3)
# state2 = GI.current_state(game)
# GI.play!(game, 3)
# state3 = GI.current_state(game)

# states = [state1, state2, state3]

# vstates = Flux.batch(GI.vectorize_state(gspec, s) for s in states)
# hiddenstates = forward(h, vstates)

# actions = [3,3,1]
# onehotactions = Flux.batch(GI.encode_action(gspec, a) for a in actions)

# g((hiddenstates[:,:,:,1],3))
# hiddenstates[:,:,:,1]
# stateactions = cat(hiddenstates, onehotactions, dims=3)
# forward(g, stateactions)

# forward(f, hiddenstates)

batch_r = [([9.103096f37, 6.4342253f37, 1.2172573f37, -5.9345403f37, 4.335317f37, -1.922554f37, -1.1086562f37, 5.4448747f37, -4.133477f37, -4.6036476f37, -5.2983734f37, -1.0046158f37, 2.0917472f37, 5.018153f37, 6.926142f36, 5.2010117f37, -4.739836f37, -6.837085f35, 2.9408774f37, 8.1636866f37, 5.5545777f37, 5.1190206f37, -3.3175674f37, 2.8772867f36, 6.9162795f36, -3.0321363f37, -1.3474731f38, -2.6346488f37, -1.7418001f37, 3.6669965f37, 4.0769748f37, 5.642504f37, -4.3100587f37, -4.536272f37, 9.1013085f36, 7.2361563f37, 6.699831f37, 5.213427f37, 6.788594f36, 2.5127895f37, -3.7990249f37, 1.6626149f37, -8.751232f36, 6.1124434f37, 2.8890792f37, -5.3267003f37, 6.6228264f37, -4.0651613f37, -8.750854f37, 1.0138958f38, -5.0922444f36, 5.532515f37, 2.0873239f37, -6.4766546f37, 2.3834298f37, 1.0271321f37, 2.3720243f36, 4.5693703f37, -3.903427f37, -5.037562f37, -7.147416f37, 3.9698593f37, -1.0508346f37, -3.3813056f37, 3.5642704f37, -7.0731227f37, 1.851113f37, 1.7753027f37, 1.5221927f37, -1.3454395f37, 1.0799189f37, -5.2645626f37, 9.382386f37, -6.22857f37, -4.6733255f36, -9.5401476f36, 1.2582538f37, -5.741112f37, -1.6655605f37, -1.3851418f37, 1.2454471f37, 3.844346f37, -1.1275677f37, 3.9049994f37, -8.1779766f37, 3.785576f37, -2.2327318f37, -8.806831f37, 7.617063f37, -1.7628736f37, -2.319465f37, -1.1858449f38, -3.098632f37, 2.773229f37, 5.9916525f37, 3.9901686f37, 2.7722208f37, 3.9903658f37, 2.4513655f37, 6.464902f36, 2.2294734f37, 6.5114775f37, 6.6826453f37, -7.40496f37, -2.9538444f37, -1.0950436f37, -1.7714793f37, 1.3216431f37, -1.1667053f38, -7.4938174f37, 4.5241126f37, 1.0923443f37, -2.8192844f35, 7.2007087f37, 1.03249977f37, 3.3486109f37, 1.427612f37, -1.7262653f37, 5.0123397f37, 9.7588985f36, -2.2738784f37, -8.310829f37, 8.0603386f37, 6.633395f37, 5.777899f37, 8.0670303f37, -7.0415035f37, 5.5774223f37], 1)] #([5.848612f35, 4.1338997f35, 7.820708f34, -3.8128573f35, 2.7853797f35, -1.2352136f35, -7.122959f34, 3.498256f35, -2.655701f35, -2.9577786f35, -3.4041307f35, -6.454512f34, 1.343918f35, 3.2240936f35, 4.449947f34, 3.341577f35, -3.0452786f35, -4.3927318f33, 1.8894722f35, 5.2450545f35, 3.568738f35, 3.2888985f35, -2.1314901f35, 1.8486182f34, 4.443612f34, -1.9481046f35, -8.657326f35, -1.6927247f35, -1.119082f35, 2.3559934f35, 2.6193991f35, 3.6252284f35, -2.7691518f35, -2.914491f35, 5.847462f34, 4.649129f35, 4.304549f35, 3.349554f35, 4.361579f34, 1.6144316f35, -2.4408196f35, 1.0682068f35, -5.6225434f34, 3.9271586f35, 1.8561924f35, -3.4223306f35, 4.255073f35, -2.611809f35, -5.6223014f35, 6.514136f35, -3.2716955f34, 3.5545624f35, 1.3410764f35, -4.161159f35, 1.5313202f35, 6.5991766f34, 1.523997f34, 2.9357568f35, -2.5078966f35, -3.236563f35, -4.592114f35, 2.5505786f35, -6.751465f34, -2.172442f35, 2.2899934f35, -4.5443816f35, 1.18931425f35, 1.1406067f35, 9.779875f34, -8.644255f34, 6.9383266f34, -3.3824075f35, 6.0280498f35, -4.0017685f35, -3.0025483f34, -6.12941f34, 8.084105f34, -3.6885824f35, -1.0700993f35, -8.899341f34, 8.001822f34, 2.4699382f35, -7.244465f34, 2.5089071f35, -5.2542347f35, 2.43218f35, -1.4344985f35, -5.658263f35, 4.8938567f35, -1.1326215f35, -1.4902236f35, -7.618887f35, -1.9908276f35, 1.7817602f35, 3.8495534f35, 2.5636274f35, 1.7811127f35, 2.563754f35, 1.5749673f35, 4.153608f34, 1.4324054f35, 4.1835322f35, 4.2935052f35, -4.7575842f35, -1.8978035f35, -7.0354965f34, -1.1381512f35, 8.491371f34, -7.495921f35, -4.814673f35, 2.9066789f35, 7.0181594f34, -1.8113296f33, 4.6263535f35, 6.6336646f34, 2.1514356f35, 9.172204f34, -1.1091012f35, 3.220357f35, 6.269955f34, -1.4609349f35, -5.3395903f35, 5.178655f35, 4.2618623f35, 3.7122193f35, 5.1829523f35, -4.5240683f35, 3.583416f35], 1)]

recur = RecurrentOracle(envsim.curnns)
@enter evaluate_batch(recur, batch_r)
evaluate_batch(recur, batch_r)

S_A = Float32[9.103096f37, 6.4342253f37, 1.2172573f37, -5.9345403f37, 4.335317f37, -1.922554f37, -1.1086562f37, 5.4448747f37, -4.133477f37, -4.6036476f37, -5.2983734f37, -1.0046158f37, 2.0917472f37, 5.018153f37, 6.926142f36, 5.2010117f37, -4.739836f37, -6.837085f35, 2.9408774f37, 8.1636866f37, 5.5545777f37, 5.1190206f37, -3.3175674f37, 2.8772867f36, 6.9162795f36, -3.0321363f37, -1.3474731f38, -2.6346488f37, -1.7418001f37, 3.6669965f37, 4.0769748f37, 5.642504f37, -4.3100587f37, -4.536272f37, 9.1013085f36, 7.2361563f37, 6.699831f37, 5.213427f37, 6.788594f36, 2.5127895f37, -3.7990249f37, 1.6626149f37, -8.751232f36, 6.1124434f37, 2.8890792f37, -5.3267003f37, 6.6228264f37, -4.0651613f37, -8.750854f37, 1.0138958f38, -5.0922444f36, 5.532515f37, 2.0873239f37, -6.4766546f37, 2.3834298f37, 1.0271321f37, 2.3720243f36, 4.5693703f37, -3.903427f37, -5.037562f37, -7.147416f37, 3.9698593f37, -1.0508346f37, -3.3813056f37, 3.5642704f37, -7.0731227f37, 1.851113f37, 1.7753027f37, 1.5221927f37, -1.3454395f37, 1.0799189f37, -5.2645626f37, 9.382386f37, -6.22857f37, -4.6733255f36, -9.5401476f36, 1.2582538f37, -5.741112f37, -1.6655605f37, -1.3851418f37, 1.2454471f37, 3.844346f37, -1.1275677f37, 3.9049994f37, -8.1779766f37, 3.785576f37, -2.2327318f37, -8.806831f37, 7.617063f37, -1.7628736f37, -2.319465f37, -1.1858449f38, -3.098632f37, 2.773229f37, 5.9916525f37, 3.9901686f37, 2.7722208f37, 3.9903658f37, 2.4513655f37, 6.464902f36, 2.2294734f37, 6.5114775f37, 6.6826453f37, -7.40496f37, -2.9538444f37, -1.0950436f37, -1.7714793f37, 1.3216431f37, -1.1667053f38, -7.4938174f37, 4.5241126f37, 1.0923443f37, -2.8192844f35, 7.2007087f37, 1.03249977f37, 3.3486109f37, 1.427612f37, -1.7262653f37, 5.0123397f37, 9.7588985f36, -2.2738784f37, -8.310829f37, 8.0603386f37, 6.633395f37, 5.777899f37, 8.0670303f37, -7.0415035f37, 5.5774223f37, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

@enter forward(envsim.curnns.g, S_A)

c = Float32[9.103096f37, 6.4342253f37, 1.2172573f37, -5.9345403f37, 4.335317f37, -1.922554f37, -1.1086562f37, 5.4448747f37, -4.133477f37, -4.6036476f37, -5.2983734f37, -1.0046158f37, 2.0917472f37, 5.018153f37, 6.926142f36, 5.2010117f37, -4.739836f37, -6.837085f35, 2.9408774f37, 8.1636866f37, 5.5545777f37, 5.1190206f37, -3.3175674f37, 2.8772867f36, 6.9162795f36, -3.0321363f37, -1.3474731f38, -2.6346488f37, -1.7418001f37, 3.6669965f37, 4.0769748f37, 5.642504f37, -4.3100587f37, -4.536272f37, 9.1013085f36, 7.2361563f37, 6.699831f37, 5.213427f37, 6.788594f36, 2.5127895f37, -3.7990249f37, 1.6626149f37, -8.751232f36, 6.1124434f37, 2.8890792f37, -5.3267003f37, 6.6228264f37, -4.0651613f37, -8.750854f37, 1.0138958f38, -5.0922444f36, 5.532515f37, 2.0873239f37, -6.4766546f37, 2.3834298f37, 1.0271321f37, 2.3720243f36, 4.5693703f37, -3.903427f37, -5.037562f37, -7.147416f37, 3.9698593f37, -1.0508346f37, -3.3813056f37, 3.5642704f37, -7.0731227f37, 1.851113f37, 1.7753027f37, 1.5221927f37, -1.3454395f37, 1.0799189f37, -5.2645626f37, 9.382386f37, -6.22857f37, -4.6733255f36, -9.5401476f36, 1.2582538f37, -5.741112f37, -1.6655605f37, -1.3851418f37, 1.2454471f37, 3.844346f37, -1.1275677f37, 3.9049994f37, -8.1779766f37, 3.785576f37, -2.2327318f37, -8.806831f37, 7.617063f37, -1.7628736f37, -2.319465f37, -1.1858449f38, -3.098632f37, 2.773229f37, 5.9916525f37, 3.9901686f37, 2.7722208f37, 3.9903658f37, 2.4513655f37, 6.464902f36, 2.2294734f37, 6.5114775f37, 6.6826453f37, -7.40496f37, -2.9538444f37, -1.0950436f37, -1.7714793f37, 1.3216431f37, -1.1667053f38, -7.4938174f37, 4.5241126f37, 1.0923443f37, -2.8192844f35, 7.2007087f37, 1.03249977f37, 3.3486109f37, 1.427612f37, -1.7262653f37, 5.0123397f37, 9.7588985f36, -2.2738784f37, -8.310829f37, 8.0603386f37, 6.633395f37, 5.777899f37, 8.0670303f37, -7.0415035f37, 5.5774223f37, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

s1 = envsim.curnns.g.statehead[1](c)
s2 = envsim.curnns.g.statehead[2](s1)
dense2 = envsim.curnns.g.statehead[2]

dense2.weight[:,1]
s1